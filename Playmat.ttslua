m_color = 'Grey'
settings_module_state = 0
m_data = {
  color = 'Grey',
  state = 1,
  settings = {
    autoupkeep = false
  },
  objects = {},
  counters = {},
  custom = {}
}

function onSave()
  save = JSON.encode(m_data)
  return save
end

function onLoad(saved_data)
  if saved_data ~= "" and saved_data ~= 'null' and saved_date ~= nil then
    m_data = JSON.decode(saved_data)
    m_color = m_data.color
  end
  if m_color ~= 'Grey' then
    init()
  else
    reset_settings_module()
  end
end

function onObjectEnterScriptingZone(zone, enter_object)
  if zone == z_hand then
    countHandCardsEvent()
  elseif zone == z_importer then
    if timer_importer ~= nil then
        Wait.stop(timer_importer)
    end
    timer_importer = Wait.time(|| check_importer(), 0.15, 0)
  end
end

function onObjectLeaveScriptingZone(zone, leave_object)
  if zone == z_hand then
    countHandCardsEvent()
  elseif zone == z_importer then
    if timer_importer ~= nil then
        Wait.stop(timer_importer)
    end
    timer_importer = Wait.time(|| check_importer(), 0.15, 0)
  end
end

function setWhite()  setColor("White") end
function setBrown()  setColor("Brown") end
function setRed()    setColor("Red") end
function setOrange() setColor("Orange") end
function setYellow() setColor("Yellow") end
function setGreen()  setColor("Green") end
function setTeal()   setColor("Teal") end
function setBlue()   setColor("Blue") end
function setPurple() setColor("Purple") end
function setPink()   setColor("Pink") end
function setColor(_color)
  m_color = _color
  m_data.color = _color
  init()
end

function validateObject(_name, _params)
  _object = getObjectFromGUID(m_data.objects[_name])
  if _object == nil then
    _object = spawnObject(_params)
    _object.setCustomObject(_params.custom)
  else
    _object.setPosition(_params.position)
    _object.setRotation(_params.rotation)
  end
  m_data.objects[_name] = _object.getGUID()
  return _object
end

function init()
  local playMats = Global.getTable("playMats")
  if playMats == nil then playMats = {} end
  for key, mat in pairs(playMats) do
    loadCounter('CMDR_'..key)
    mat.call("loadCounter", 'CMDR_'..m_color)
  end
  if playMats[m_color] ~= nil then
    return
  else
    playMats[m_color] = self
  end
  Global.setTable("playMats", playMats)

  loadBoard()
  loadCounter('CMD_Zone')
  loadCounter('Life')
  loadHandCounter()
  loadControllerModule()

  settings_module_state = 1
  reset_settings_module()
end

function count_hand(_color)
  local handObjects = Player[_color].getHandObjects(1)
  local objectCount = 0 --set to -1 because an object is still counted as being in hand when it leaves the zone
  for j, obj in ipairs(handObjects) do
      if obj.tag == "Card" then
          objectCount = objectCount+1
      end
  end
  return objectCount
end

function get_deck()
  local objects = z_library.getObjects()
  for key, object in pairs(objects) do
    if object.tag == 'Deck' or obj.tag == "Card" then
      return object
    end
  end
  return nil
end

function draw(i)
  local deck = get_deck()
  if deck == nil then
    broadcastToColor("No deck in library slot", m_color)
    return false
  end
  deck.deal(i,m_color,1) return true
end

function allBut(_color)
  local players = {}
  for key, color in pairs(Color.list) do
    if color ~= _color then
      table.insert(players,color)
    end
  end
  return players
end

m_scry = 0
function scry()
  m_scry = m_scry + 1
  local deck = get_deck()
  if deck == nil then
    broadcastToColor("No deck in library slot", m_color)
    return false
  end
  local card = deck.dealToColorWithOffset({(5*(m_scry%5+1)-15),5,(5+math.ceil(m_scry/5)*5)}, true, m_color)
  card.setHiddenFrom(allBut(m_color))
  card.setLock(true)
  card.setRotation(self.getRotation())
  card.createButton{
    click_function = "scry_top", function_owner = self, label = "Top",
    position = {2,0,-2}, width = 750, height = 400,
    color = m_colddor, font_size = 200
  }
  card.createButton{
    click_function = "scry_bottom", function_owner = self, label = "Bottom",
    position = {2,0,-1}, width = 750, height = 400,
    color = m_color, font_size = 200
  }
  card.createButton{
    click_function = "scry_grave", function_owner = self, label = "Grave",
    position = {2,0,0}, width = 750, height = 400,
    color = m_color, font_size = 200
  }
  card.createButton{
    click_function = "scry_hand", function_owner = self, label = "Hand",
    position = {2,0,1}, width = 750, height = 400,
    color = m_color, font_size = 200
  }
  card.createButton{
    click_function = "scry_field", function_owner = self, label = "Field",
    position = {2,0,2}, width = 750, height = 400,
    color = m_color, font_size = 200
  }
  return true
end

function scry_top(obj, player_clicker_color, alt_click)
  obj.setPosition(z_library.positionToWorld({0,1,0}))
  obj.clearButtons()
  local deck = get_deck()
  if deck == nil then
    broadcastToColor("No deck in library slot", m_color)
    return false
  end
  obj.setLock(false)
  deck.putObject(obj)
  m_scry = m_scry - 1
end

function scry_bottom(obj, player_clicker_color, alt_click)
  obj.setPosition(z_library.positionToWorld({0,-1,0}))
  obj.clearButtons()
  local deck = get_deck()
  if deck == nil then
    broadcastToColor("No deck in library slot", m_color)
    return false
  end
  obj.setLock(false)
  deck.putObject(obj)
  m_scry = m_scry - 1
end

function scry_grave(obj, player_clicker_color, alt_click)
  obj.setLock(false)
  obj.setPosition(z_grave.positionToWorld({0,1,0}))
  --obj.setRotation(self.getRotation())
  obj.setHiddenFrom({})
  obj.clearButtons()
  m_scry = m_scry - 1
end

function scry_hand(obj, player_clicker_color, alt_click)
  obj.deal(1,m_color,1)
  obj.setRotation(self.getRotation())
  obj.setHiddenFrom({})
  obj.clearButtons()
  obj.setLock(false)
  m_scry = m_scry - 1
end

function scry_field(obj, player_clicker_color, alt_click)
  obj.setPosition(z_field.positionToWorld({0,1,0}))
  obj.setRotation(self.getRotation())
  obj.setHiddenFrom({})
  obj.clearButtons()
  obj.setLock(false)
  m_scry = m_scry - 1
end

function untap()
  local objects = z_field.getObjects()
  for key, object in pairs(objects) do
    if object.tag == 'Card'
    then
      local old = object.getRotation()
      object.setRotationSmooth(Vector(old.x,self.getRotation().y,old.z))
    end
  end
end

function reset()
  m_data.counters['Life'] = 40
  updateDisplay()
  for key, counter in pairs(m_counters) do
    ctr_reset(counter)
  end
  local deck = get_deck()
  for key, object in pairs(Player[m_color].getHandObjects()) do
    if object.tag == 'Card' then
      deck.putObject(object)
    end
  end
  for key, object in pairs(z_field.getObjects()) do
    if object.tag == 'Card' or object.tag == 'Deck' then
      deck.putObject(object)
    end
  end
  for key, object in pairs(z_grave.getObjects()) do
    if object.tag == 'Card' or object.tag == 'Deck' then
      deck.putObject(object)
    end
  end
  for key, object in pairs(z_exile.getObjects()) do
    if object.tag == 'Card' or object.tag == 'Deck' then
      deck.putObject(object)
    end
  end
  updateControllerModule(1)
end

function onPlayerTurnStart(player_color_start, player_color_previous)
  if player_color_start == m_color then
    if m_data.counters['Life'] > 0 and m_data.state > 2 then
      m_turnTimer = spawnObject({
        type     = '3DText',
        position = self.getPosition() + Vector(-19,1,15),
        rotation = self.getRotation()
      })
      m_time = 0
      if m_data.settings.autoupkeep then
        untap()
        draw(1)
        updateControllerModule(4)
      else
        updateControllerModule(3)
      end
    else
      Turns.turn_color = Turns.getNextTurnColor()
    end
  elseif player_color_previous == m_color then
    destroyObject(m_turnTimer)
    updateControllerModule(5)
  end
end

function onUpdate()
  if m_turnTimer ~= nil then
    m_time = m_time + Time.delta_time
    m_turnTimer.setValue(m_time)
  end
end

--===============================
--= Begin code for board module =
--===============================

function loadBoard()
  local _custom = default_mats[m_color] or default_mats['White']
  if m_data.custom.mats ~= nil then _custom = m_data.custom.mats[m_data.mat] end
  m_board = validateObject("m_board", {
    type = 'Custom_Board',
    position = self.positionToWorld({-14,0,-12}),
    rotation = self.getRotation(),
    custom = _custom,
    callback_function = function(_obj)
      _obj.interactable = false
      _obj.setLock(true)
      _obj.setColorTint(m_color)
    end
  })

  local snaps = {
    {
      name             = 'Exile',
      url              = "http://cloud-3.steamusercontent.com/ugc/1461933732895820463/46A4F9B08D508C6E27B54978769CFDE75C956235/",
      position         = {-7.25,1,-5},
      rotation         = {90,180,0}
    },
    {
      name             = 'Library',
      url              = "http://cloud-3.steamusercontent.com/ugc/1461933732895808328/410945C66D37436B9D80CFC75406C57F643B5A2F/",
      position         = {-7.25,1,0},
      rotation         = {90,180,0}
    },
    {
      name             = 'Graveyard',
      url              = "http://cloud-3.steamusercontent.com/ugc/1461933361190728243/C5192B1FBEA31B75D2B6874C1FF6FEF41AA4849C/",
      position         = {-7.25,1,5},
      rotation         = {90,180,0}
    }
  }

  m_board.setDecals(snaps)
  m_board.setSnapPoints(snaps)

  z_field = validateObject("z_field", {
    position = m_board.positionToWorld({1,0,0}),
    scale = {26, 2, 16},
    type = 'ScriptingTrigger',
    rotation = m_board.getRotation()
  })

  z_exile = validateObject("z_exile", {
    position = m_board.positionToWorld({-7.25,0,-5}),
    scale = {3, 2, 4},
    type = 'ScriptingTrigger',
    rotation = m_board.getRotation()
  })

  z_library = validateObject("z_library", {
    position = m_board.positionToWorld({-7.25,0,0}),
    scale = {3, 2, 4},
    type = 'ScriptingTrigger',
    rotation = m_board.getRotation()
  })

  z_grave = validateObject("z_grave", {
    position = m_board.positionToWorld({-7.25,0,5}),
    scale = {3, 2, 4},
    type = 'ScriptingTrigger',
    rotation = m_board.getRotation()
  })
end

default_mats = {
  Blue   = {image = 'http://cloud-3.steamusercontent.com/ugc/1465312168065023704/EC3CAEC481AC88C48A65DD5217C28BB2B831A268/'},
  White  = {image = 'http://cloud-3.steamusercontent.com/ugc/1465312168065031777/37698F67AC1FC23EEFFC5139096E0B45380DB125/'},
  Green  = {image = 'http://cloud-3.steamusercontent.com/ugc/1465312168065093001/8B4EC8CF2E4D0F25152B941DA4F67BCB6250E1F0/'},
  Red    = {image = 'http://cloud-3.steamusercontent.com/ugc/1465312168065095714/EF6A45E01EC8617C62E4AC14D183E76B37BEBFA5/'},
  Pink   = {image = 'http://cloud-3.steamusercontent.com/ugc/1465312168065098818/6FE5D66E4B5F0D13B2499B9A4F4F67038BE8CD7C/'},
  Teal   = {image = 'http://cloud-3.steamusercontent.com/ugc/1465312168065102580/635816A0009B20F7D2A06556D3CDC3D21EFC7F50/'},
  Purple = {image = 'http://cloud-3.steamusercontent.com/ugc/1465312168065106112/0CF0296DFBCC60A2B2C3F2A3976C699648CAD9FF/'},
  Yellow = {image = 'http://cloud-3.steamusercontent.com/ugc/1465312168065107760/8E4A04D578BF6628946DCF26B381DCC627A2A9E2/'},
  Orange = {image = 'http://cloud-3.steamusercontent.com/ugc/1465312168065110625/295ED3432B485AC015E1D3E2DE86CEE4127934AC/'},
  Brown  = {image = 'http://cloud-3.steamusercontent.com/ugc/1465312168065113460/24C65D16A19E192DA6681AFE08E657954741942E/'}
}

mats_max = 0

m_data.mat = 1
function setMat(i)
  if i >= mats_max then i = mats_max - 1 end
  if i <= 0 then i = 1 end
  m_data.mat = i
  if m_board ~= nil then
    m_board.setPosition({0,0,0})
    destroyObject(m_board)
  end
  m_data.objects.board = nil
  loadBoard()
end

function change_playmat()
  max_mats = 0
  for key, pair in ipairs(m_data.custom.mats) do
    mats_max = mats_max + 1
  end
  self.clearButtons()
  self.createButton({
    click_function = "next_mat", function_owner = self, label = ">",
    position = {0.8,0.2,0}, width = 600, height = 400,
    color = m_color, font_size = 200
  })

  self.createButton({
    click_function = "prev_mat", function_owner = self, label = "<",
    position = {-0.8,0.2,0}, width = 600, height = 400,
    color = m_color, font_size = 200
  })

  self.createButton({
    click_function = "reset_settings_module", function_owner = self, label = "Confirm",
    position = {0,0.2,-1}, width = 1500, height = 400,
    color = m_color, font_size = 200
  })
end

function next_mat()
  setMat(m_data.mat + 1)
end

function prev_mat()
  setMat(m_data.mat - 1)
end

--==================================
--= Begin code for settings module =
--==================================

function check_importer()
  local objects = z_importer.getObjects()
  m_importer_token = objects[1]
  reset_settings_module()
end

smf_settings   = function() settings_module_state = 2 reset_settings_module() end
smb_back = function() self.createButton({
    click_function = "smf_back", function_owner = self, label = "<- Back",
    position = {0,0.2,-1.5}, width = 1500, height = 400,
    color = m_color, font_size = 200}) end
smf_back       = function() settings_module_state = 1 reset_settings_module() end
smf_autoupkeep = function()
  if m_data.settings.autoupkeep then m_data.settings.autoupkeep = false
  else m_data.settings.autoupkeep = true end
  reset_settings_module()
end
smf_save = function() m_importer_token.setDescription(JSON.encode(m_data.custom)) end
smf_load = function()
  m_data.custom = JSON.decode(m_importer_token.getDescription())
  reset_settings_module()
end
smf_importer = function()
  m_importer = validateObject("m_importer", {
    type = 'Custom_Tile',
    position = self.positionToWorld({4,0,0}),
    rotation = self.getRotation(),
    custom = {
      image = 'http://cloud-3.steamusercontent.com/ugc/1465312168065740925/AEB4C12F0AA2A14E6A55BF40876279A493477C47/',
      type = 2
    },
    callback_function = function(_obj)
      _obj.interactable = false
      _obj.setLock(true)
      _obj.setColorTint(m_color)
      z_importer = validateObject("z_importer", {
        position = _obj.positionToWorld({0,1.25,0}),
        scale = {1, 2, 1},
        type = 'ScriptingTrigger'
      })
    end
  })
  reset_settings_module()
end

function reset_settings_module()
  self.clearButtons()
  if settings_module_state == 0 then
    for key, color in pairs(Color.list) do
      if color ~= 'Grey' and color ~= 'Black' then
        self.createButton({
          click_function = "set"..color,
          function_owner = self,
          position = {(0.8-1.6*(key%2)),0.5,(3-math.ceil(key/2))}, width = 600, height = 400,
          color = color
        })
      end
    end
  elseif settings_module_state == 1 then
    if m_importer_token ~= nil then
      self.createButton({
        click_function = "smf_load", function_owner = self, label = "Load",
        position = {-0.8,0.2,1.5}, width = 700, height = 400,
        color = m_color, font_size = 200
      })
      self.createButton({
        click_function = "smf_save", function_owner = self, label = "Save",
        position = {0.8,0.2,1.5}, width = 700, height = 400,
        color = m_color, font_size = 200
      })
    end
    if m_importer == nil then
      self.createButton({
        click_function = "smf_importer", function_owner = self, label = "Importer",
        position = {0,0.2,1.5}, width = 1500, height = 400,
        color = m_color, font_size = 200
      })
    end
    self.createButton({
      click_function = "smf_settings", function_owner = self, label = "Settings",
      position = {0,0.2,-0.5}, width = 1500, height = 400,
      color = m_color, font_size = 200
    })
  elseif settings_module_state == 2 then
    smb_back()
    local _label = "Auto Upkeep Off" local _color = "Red"
    if m_data.settings.autoupkeep then
      _label = "Auto Upkeep On" _color = "Green"
    end
    self.createButton({
      click_function = "smf_autoupkeep", function_owner = self,
      label = _label,
      position = {0,0.2,-0.5}, width = 1500, height = 400,
      color = _color,
      hover_color = "Grey", font_size = 200
    })
    if m_data.custom.mats ~= nil then
      self.createButton({
        click_function = "change_playmat", function_owner = self, label = "Change Playmat",
        position = {0,0.2,0.5}, width = 1500, height = 400,
        color = m_color, font_size = 200
      })
    end
  end
end

--====================================
--= Begin code for controller module =
--====================================

function loadControllerModule()
  m_controller = validateObject("m_controller", {
    type = 'Custom_Token',
    position = self.positionToWorld({-28,0,0}),
    rotation = self.getRotation(),
    custom = {
      image = 'http://cloud-3.steamusercontent.com/ugc/1461933574032138679/9E9A9FA6BB5EAA23C78F8A6AF5C235AB2BB9795D/'
    }
  })
  updateControllerModule(m_data.state)
  m_controller.interactable = false
  m_controller.setLock(true)
end

buttons = {
  start = function(pos) m_controller.createButton({
    click_function = "cmf_start", function_owner = self, label = "Start",
    position = pos, width = 1300, height = 400,
    color = m_color, font_size = 200
  }) end,
  ready = function(pos) m_controller.createButton({
    click_function = "cmf_ready", function_owner = self, label = "Ready",
    position = pos, width = 1300, height = 400,
    color = m_color, font_size = 200
  }) end,
  mulligan = function(pos) m_controller.createButton({
    click_function = "cmf_mulligan", function_owner = self, label = "Mulligan",
    position = pos, width = 1300, height = 400,
    color = m_color, font_size = 200
  }) end,
  upkeep = function(pos) m_controller.createButton({
    click_function = "cmf_upkeep", function_owner = self, label = "Upkeep",
    position = pos, width = 1300, height = 400,
    color = m_color, font_size = 200
  }) end,
  untap = function(pos) m_controller.createButton({
    click_function = "cmf_untap", function_owner = self, label = "Untap",
    position = pos, width = 600, height = 400,
    color = m_color, font_size = 200
  }) end,
  draw = function(pos) m_controller.createButton({
    click_function = "cmf_draw", function_owner = self, label = "Draw",
    position = pos, width = 600, height = 400,
    color = m_color, font_size = 200
  }) end,
  reset = function(pos) m_controller.createButton({
    click_function = "cmf_reset", function_owner = self, label = "Reset",
    position = pos, width = 600, height = 400,
    color = m_color, font_size = 200
  }) end,
  reset_confirm = function(pos) m_controller.createButton({
    click_function = "cmf_reset_confirm", function_owner = self, label = "Reset",
    position = pos, width = 1300, height = 400,
    color = "Red", font_size = 200
  }) end,
  reset_cancel = function(pos) m_controller.createButton({
    click_function = "cmf_reset_cancel", function_owner = self, label = "Cancel",
    position = pos, width = 1300, height = 400,
    color = "White", font_size = 200
  }) end,
  pass = function(pos) m_controller.createButton({
    click_function = "cmf_pass", function_owner = self, label = "Pass",
    position = pos, width = 1300, height = 400,
    color = m_color, font_size = 200
  }) end,
  scry = function(pos) m_controller.createButton({
    click_function = "cmf_scry", function_owner = self, label = "Scry",
    position = pos, width = 600, height = 400,
    color = m_color, font_size = 200
  }) end
}

states = {
  function()
    buttons.start({0,0.1,-1.5})
  end,
  function()
    buttons.ready({0,0.1,-1.5})
    buttons.mulligan({0,0.1,-0.5})
  end,
  function()
    buttons.upkeep({0,0.1,-1.5})
    buttons.untap({-0.8,0.1,-0.5})
    buttons.draw({0.8,0.1,-0.5})
    buttons.reset({-0.8,0.1,0.5})
    buttons.scry({0.8,0.1,0.5})
  end,
  function()
    buttons.pass({-0.8,0.1,-1})
    buttons.untap({-0.8,0.1,11})
    buttons.draw({0.8,0.1,11})
    buttons.reset({-0.8,0.1,12})
    buttons.scry({0.8,0.1,0.5})
  end,
  function()
    buttons.untap({-0.8,0.1,11})
    buttons.draw({0.8,0.1,11})
    buttons.reset({-0.8,0.1,12})
    buttons.scry({0.8,0.1,0.5})
  end,
  function()
    buttons.reset_confirm({0,0.1,-1.5})
    buttons.reset_cancel({0,0.1,-0.5})
  end
}

cmf_start = function()
  if count_hand(m_color) > 0 then updateControllerModule(2) return end
  if draw(7) then updateControllerModule(2) end
end
cmf_mulligan = function()
  local deck = get_deck()
  if deck == nil then print("no deck in library slot") end
  for key, object in pairs(Player[m_color].getHandObjects()) do
    if object.tag == 'Card' then deck.putObject(object) end
  end
  deck.shuffle()
  Wait.time(function() draw(7) end, 0.3, 1)
end
cmf_ready = function() updateControllerModule(3) end
cmf_draw = function() draw(1) end
cmf_untap = function() untap() end
cmf_reset = function() m_data.state_last = m_data.state updateControllerModule(6) end
cmf_reset_confirm = function() reset() end
cmf_reset_cancel = function() updateControllerModule(m_data.state_last) end
cmf_upkeep = function() untap() draw(1) end
cmf_scry = function() scry(1) end

function updateControllerModule(state)
  m_data.state = state
  m_controller.clearButtons()
  states[m_data.state]()
end

--======================================
--= Begin code for hand counter module =
--======================================
function loadHandCounter()
  m_handCounter = validateObject("m_handCounter", {
    type     = 'Custom_Token',
    position = self.positionToWorld({-28,0,-23}),
    rotation = self.getRotation(),
    custom   = {
      image = 'http://cloud-3.steamusercontent.com/ugc/1011566237274824037/BDFCF49DA08C225C34C3438FC76F8FA0DAF9E3FA/'
    }
  })
  m_handCounter.setLock(true)
  m_handCounter.interactable = false
  m_handCounter.setColorTint(m_color)

  if z_hand == nil then
    local handTransform = Player[m_color].getHandTransform(1)
    z_hand = validateObject("z_hand", {
        type              = "ScriptingTrigger",
        position          = handTransform.position,
        rotation          = handTransform.rotation,
        scale             = handTransform.scale,
    })
  end
  m_handCounter.createButton({
      click_function = "null", function_owner = self,
      label = "0",
      color = m_color,
      position = {0, 0.2, 0},
      width = 600, height = 800, font_size = 1100
  })
end

function countHandCardsEvent()
  if timer_hand ~= "" then --checks so we don't try to stop a non ID and get an error
      Wait.stop(timer_hand)
  end
  timer_hand = Wait.time(|| countHandCards(), 0.15, 0) --Add a timer to prevent errors of cards being counted while still in transit
end

function countHandCards()
    local objectCount = count_hand(m_color)
    if objectCount > 9 then
        m_handCounter.editButton({
            index = 0,
            label = objectCount,
            tooltip = objectCount.." cards in hand",
            width = 900
        })
    else
        m_handCounter.editButton({
            index = 0,
            label = objectCount,
            tooltip = objectCount.." cards in hand",
            width = 600
        })
    end
end

--==========================================
--= Begin code for special counters module =
--==========================================
m_counters = {}
count_CMDR = 0

function getColorIndex(_color)
  for key, color in ipairs(Color.list) do
    if color == _color then return key end
  end
end

function ctr_update(_obj)
  local val = m_data.counters[_obj.getName()]
  local update = {index = 0, label = tostring(val)}
  if val >= 99 then
    update.font_size = 585
  else
    update.font_size = 700
  end
  _obj.editButton(update)
end

function ctr_add5(_obj)
  m_data.counters[_obj.getName()] = m_data.counters[_obj.getName()] + 5
  ctr_update(_obj)
end

function ctr_sub5(_obj)
  m_data.counters[_obj.getName()] = m_data.counters[_obj.getName()] - 5
  ctr_update(_obj)
end

function ctr_reset(_obj)
  local name = _obj.getName()
  if string.sub(name,1,4) == "Life" then
    m_data.counters[_obj.getName()] = 40
  else
    m_data.counters[_obj.getName()] = 0
  end
  ctr_update(_obj)
end

function ctr_addsub(_obj, _color, alt_click)
  if alt_click then
    m_data.counters[_obj.getName()] = m_data.counters[_obj.getName()] - 1
  else
    m_data.counters[_obj.getName()] = m_data.counters[_obj.getName()] + 1
  end
  ctr_update(_obj)
end

function loadCounter(_counter)
  local counter = {
    type = 'Custom_Token',
    rotation = self.getRotation(),
    custom = {
      image = 'http://cloud-3.steamusercontent.com/ugc/1008185551998055475/15F69038D7C6043496AE49ED55B41A0ABF4EC670/'
    }}

  if string.sub(_counter,1,5) == "CMDR_" then
    count_CMDR = count_CMDR + 1
    local color = string.sub(_counter,6,-1)
    counter.position = self.positionToWorld({-2*count_CMDR,0,-22})
    counter.scale = {0.5,0.5,0.5}
    counter.custom.image = 'http://cloud-3.steamusercontent.com/ugc/1009313481328783631/DDCC83524ED154C1F937AC5319E4903077E4A335/'
    counter.callback_function = function(_obj)
      _obj.setName(_counter)
      if m_data.counters[_obj.getName()] == nil then m_data.counters[_obj.getName()] = 0 end
      _obj.interactable = false
      _obj.setLock(true)
      _obj.setColorTint(color)
      _obj.createButton({
        click_function = 'ctr_addsub',
        function_owner = self,
        label = tostring(m_data.counters[_obj.getName()]),
        color = color,
        position = {-0,0.1,-0.25},
        tooltip= "Total Life",
        width = 900,
        height = 600,
        font_size = 700
      })
      _obj.createButton({
        click_function = 'ctr_add5',
        function_owner = self,
        label = '+5',
        color = color,
        position = {1.1,0.1,0.45},
        tooltip="+5 Life",
        width = 250,
        height = 240,
        font_size = 280
     })
      _obj.createButton({
        click_function = 'ctr_reset',
        function_owner = self,
        label =  '{R}',
        color=color,
        position = {-0.0,0.1,1.0},
        tooltip="Reset Life",
        width = 190,
        height = 180,
        font_size = 180
      })
    end
  elseif string.sub(_counter,1,4) == "Life" then
    counter.position = self.positionToWorld({0,0,-24})
    counter.custom   = {
        image = 'http://cloud-3.steamusercontent.com/ugc/1013813832079194758/3AB7F311862EBE5564D11FEEB30D3C598B60856A/'
      }
    counter.callback_function = function(_obj)
      _obj.setName(_counter)
      if m_data.counters[_obj.getName()] == nil then m_data.counters[_obj.getName()] = 40 end
      _obj.setLock(true)
      _obj.interactable = false
      _obj.setColorTint(m_color)
      _obj.createButton({
        click_function = 'ctr_addsub',
        function_owner = self,
        label = tostring(m_data.counters[_obj.getName()]),
        color={0, 0, 0, 1},
        font_color={255, 255, 255, 1},
        position = {-0,0.1,-0.25},
        tooltip="Total Life",
        width = 900,
        height = 600,
        font_size = 700
      })
      _obj.createButton({
        click_function = 'ctr_add5',
        function_owner = self,
        label =  '+5',
        color={0, 0, 0, 1},
        font_color={255, 255, 255, 1},
        position = {1.2,0.1,-0.45},
        tooltip="+5 Life",
        width = 250,
        height = 240,
        font_size = 280
     })
     _obj.createButton({
        click_function = 'ctr_sub5',
        function_owner = self, label =  '-5',
        color={0, 0, 0, 1},
        font_color={255, 255, 255, 1},
        position = {-1.3,0.1,-0.45},
        tooltip="-5 Life",
        width = 250,
        height = 240,
        font_size = 280
      })
      _obj.createButton({
        click_function = 'ctr_reset',
        function_owner = self,
        label =  '{R}',
        color={0, 0, 0, 1},
        font_color={255, 255, 255, 1},
        position = {-0.0,0.1,0.70},
        tooltip="Reset Life",
        width = 190,
        height = 180,
        font_size = 180
      })
    end
  elseif string.sub(_counter,1,8) == "CMD_Zone" then
    counter.type     = 'Custom_Token'
    counter.position = self.positionToWorld({-23,0,-23})
    counter.rotation = self.getRotation()
    counter.custom   = {
        image = 'http://cloud-3.steamusercontent.com/ugc/1461933361190756318/E1F92D2901E7B8F8FE8D4108FAA8D597BBB7B37F/'
      }
    counter.callback_function = function(_obj)
      _obj.setName(_counter)
      if m_data.counters[_obj.getName()] == nil then m_data.counters[_obj.getName()] = 0 end
      _obj.interactable = false
      _obj.setLock(true)
      _obj.setColorTint(m_color)
      local snaps = {
        {
          name             = 'Commander1',
          url              = "http://cloud-3.steamusercontent.com/ugc/1461933732895811754/0757B585D889D50233F95FC1487787E2F6C3BCD9/",
          position         = {-1.5,0.101,0},
          rotation         = {90,180,0}
        },
        {
          name             = 'Commander2',
          url              = "http://cloud-3.steamusercontent.com/ugc/1461933732895811754/0757B585D889D50233F95FC1487787E2F6C3BCD9/",
          position         = {1.5,0.101,0},
          rotation         = {90,180,0}
        }
      }
      _obj.setDecals(snaps)
      _obj.setSnapPoints(snaps)
      _obj.createButton({
        click_function = 'ctr_addsub', function_owner = self,
        label = tostring(m_data.counters[_obj.getName()]),
        color=m_color, position = {0,0.1,0},
        width = 400, height = 400, font_size = 400
      })
    end
  end

  m_counters[_counter] = validateObject("cntr_".._counter, counter)
end
